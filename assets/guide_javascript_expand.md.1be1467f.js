import{_ as a,c as s,o as e,a as n}from"./app.1559a474.js";const C=JSON.parse('{"title":"拓展","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/javascript/expand.md"}'),l={name:"guide/javascript/expand.md"},o=n(`<h1 id="拓展" tabindex="-1">拓展 <a class="header-anchor" href="#拓展" aria-hidden="true">#</a></h1><h2 id="清空数组" tabindex="-1">清空数组 <a class="header-anchor" href="#清空数组" aria-hidden="true">#</a></h2><ol><li>arr.length = 0</li><li>arr = []</li><li>arr.splice(0, arr.length)</li></ol><p>建议第二种，因为 <code>arr</code> 被重新赋值后，如果之前的数组没有被引用，则会被 <code>JavaScript</code> 垃圾回收机制回收。</p><h2 id="foreach" tabindex="-1">forEach <a class="header-anchor" href="#foreach" aria-hidden="true">#</a></h2><p><code>forEach</code> 原则上是不能修改原数组的，但是因为 <code>JavaScript</code> 本身的原因。如果数组的某一项是引用类型， <code>forEach</code> 是可以修改原数组的</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mike</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jack</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">alva</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(arr) </span><span style="color:#676E95;font-style:italic;">// [1, &#39;mike&#39;, { name: &#39;alva&#39; }]</span></span>
<span class="line"></span></code></pre></div><h2 id="冻结对象" tabindex="-1">冻结对象 <a class="header-anchor" href="#冻结对象" aria-hidden="true">#</a></h2><h3 id="object-freeze" tabindex="-1">Object.freeze() <a class="header-anchor" href="#object-freeze" aria-hidden="true">#</a></h3><p>可以冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。该方法返回被冻结的对象。</p><h3 id="object-freeze-存在的意义" tabindex="-1">Object.freeze() 存在的意义 <a class="header-anchor" href="#object-freeze-存在的意义" aria-hidden="true">#</a></h3><p>如果你有一个巨大的数组或 <code>Object</code> ，并且确信数据不会修改，使用 <code>Object.freeze()</code> 可以让性能大幅提升。在我的实际开发中，这种提升大约有5~10倍，倍数随着数据量递增,对于纯展示的大数据，都可以使用 <code>Object.freeze()</code> 提升性能。</p>`,12),p=[o];function c(r,t,i,d,D,y){return e(),s("div",null,p)}const A=a(l,[["render",c]]);export{C as __pageData,A as default};
