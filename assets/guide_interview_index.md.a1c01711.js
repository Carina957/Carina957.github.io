import{_ as s,c as n,o,a}from"./app.7a2c8789.js";const _=JSON.parse('{"title":"面经","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/interview/index.md"}'),e={name:"guide/interview/index.md"},p=a(`<h1 id="面经" tabindex="-1">面经 <a class="header-anchor" href="#面经" aria-hidden="true">#</a></h1><h2 id="原型原型链" tabindex="-1">原型原型链 <a class="header-anchor" href="#原型原型链" aria-hidden="true">#</a></h2><p>在 <code>javascript</code> 中，函数可以有属性。每个函数都有一个特殊的属性叫作原型（ <code>prototype</code> ），正如下面所展示的。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doSomething</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">doSomething</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">doSomething</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span></span>
<span class="line"></span></code></pre></div><p>正如上面所看到的， <code>doSomething</code> 函数有一个默认的原型属性，它在控制台上面呈现了出来。运行这段代码之后，控制台上面应该出现了像这样的一个对象。</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  constructor: ƒ doSomething(),</span></span>
<span class="line"><span style="color:#A6ACCD;">  __proto__: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    constructor: ƒ Object(),</span></span>
<span class="line"><span style="color:#A6ACCD;">    hasOwnProperty: ƒ hasOwnProperty(),</span></span>
<span class="line"><span style="color:#A6ACCD;">    isPrototypeOf: ƒ isPrototypeOf(),</span></span>
<span class="line"><span style="color:#A6ACCD;">    propertyIsEnumerable: ƒ propertyIsEnumerable(),</span></span>
<span class="line"><span style="color:#A6ACCD;">    toLocaleString: ƒ toLocaleString(),</span></span>
<span class="line"><span style="color:#A6ACCD;">    toString: ƒ toString(),</span></span>
<span class="line"><span style="color:#A6ACCD;">    valueOf: ƒ valueOf()</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>我们可以添加一些属性到 doSomething 的原型上面，如下所示。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">doSomething</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>结果：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  foo: &#39;bar&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  constructor: ƒ doSomething(),</span></span>
<span class="line"><span style="color:#A6ACCD;">  __proto__: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    constructor: ƒ Object(),</span></span>
<span class="line"><span style="color:#A6ACCD;">    hasOwnProperty: ƒ hasOwnProperty(),</span></span>
<span class="line"><span style="color:#A6ACCD;">    isPrototypeOf: ƒ isPrototypeOf(),</span></span>
<span class="line"><span style="color:#A6ACCD;">    propertyIsEnumerable: ƒ propertyIsEnumerable(),</span></span>
<span class="line"><span style="color:#A6ACCD;">    toLocaleString: ƒ toLocaleString(),</span></span>
<span class="line"><span style="color:#A6ACCD;">    toString: ƒ toString(),</span></span>
<span class="line"><span style="color:#A6ACCD;">    valueOf: ƒ valueOf()</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>然后，我们可以使用 <code>new</code> 运算符来在现在的这个原型基础之上，创建一个 <code>doSomething</code> 的实例。正确使用 <code>new</code> 运算符的方法就是在正常调用函数时，在函数名的前面加上一个 <code>new</code> 前缀。通过这种方法，在调用函数前加一个 <code>new</code> ，它就会返回一个这个函数的实例化对象。然后，就可以在这个对象上面添加一些属性。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> doSomeInstancing </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doSomething</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">doSomeInstancuing</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prop </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">some value</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>结果：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  prop: &quot;some value&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  __proto__: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    foo: &quot;bar&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    constructor: ƒ doSomething(),</span></span>
<span class="line"><span style="color:#A6ACCD;">    __proto__: {</span></span>
<span class="line"><span style="color:#A6ACCD;">      constructor: ƒ Object(),</span></span>
<span class="line"><span style="color:#A6ACCD;">      hasOwnProperty: ƒ hasOwnProperty(),</span></span>
<span class="line"><span style="color:#A6ACCD;">      isPrototypeOf: ƒ isPrototypeOf(),</span></span>
<span class="line"><span style="color:#A6ACCD;">      propertyIsEnumerable: ƒ propertyIsEnumerable(),</span></span>
<span class="line"><span style="color:#A6ACCD;">      toLocaleString: ƒ toLocaleString(),</span></span>
<span class="line"><span style="color:#A6ACCD;">      toString: ƒ toString(),</span></span>
<span class="line"><span style="color:#A6ACCD;">      valueOf: ƒ valueOf()</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>当你访问 <code>doSomeInstancing</code> 的一个属性，浏览器首先查找 <code>doSomeInstancing</code> 是否有这个属性。如果 <code>doSomeInstancing</code> 没有这个属性，然后浏览器就会在 <code>doSomeInstancing</code> 的 <code>__proto__</code> 中查找这个属性 (也就是 <code>doSomething.prototype</code>). 如果 <code>doSomeInstancing</code> 的 <code>__proto__</code> 有这个属性，那么 <code>doSomeInstancing</code> 的 <code>__proto__</code> 上的这个属性就会被使用。否则，如果 <code>doSomeInstancing</code> 的 <code>__proto__</code> 没有这个属性，浏览器就会去查找 <code>doSomeInstancing</code> 的 <code>__proto__</code> 的 <code>__proto__</code> ，看它是否有这个属性。默认情况下，所有函数的原型属性的 <code>__proto__</code> 就是 <code>window.Object.prototype</code>. 所以 <code>doSomeInstancing</code> 的 <code>__proto__</code> 的 <code>__proto__</code> (也就是 <code>doSomething.prototype</code> 的 <code>__proto__</code> (也就是 Object.prototype)) 会被查找是否有这个属性。如果没有在它里面找到这个属性，然后就会在 <code>doSomeInstancing</code> 的 <code>__proto__</code> 的 <code>__proto__</code> 的 <code>__proto__</code> <code>里面查找。然而这有一个问题：doSomeInstancing</code> 的 <code>__proto__</code> 的 <code>__proto__</code> 的 <code>__proto__</code> 不存在。最后，原型链上面的所有的 <code>__proto__</code> 都被找完了，浏览器所有已经声明了的 <code>__proto__</code> 上都不存在这个属性，然后就得出结论，这个属性是 <code>undefined</code>.</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><ul><li>new关键字做了哪几件事 <ol><li>创建一个空对象 <code>let obj = {}</code></li><li>改变 <code>this</code> 指向 (<code>bind</code> 、 <code>call</code> 、 <code>apply</code>)</li><li>添加属性</li><li>返回这个对象 <code>return obj</code></li></ol></li><li>构造函数/对象模板：专门用来反复创建相同结构对象的专门方法。</li><li>继承：使用现有类型，创建出新的类型，新类型可以使用现有类型的属性和方法，也可以 拓展出现有类型没有的属性和方法。</li><li>原型链：一个对象的隐式指向创建该对象的构造函数的原型对象，以此形成的链叫原型 链。</li><li>原型链的作用：用来实现继承的。</li><li>隐式原型： <code>__proto__</code> 任何对象都有隐式原型，并且一个对象的隐式原型指向创建该对象的构造函数的原型对象。</li><li><code>constructor</code>: 每个实例对象都从原型中继承了一个 <code>constructor</code> 属性，该属性指向了用于构造此实例对象的构造函数。</li><li>每个实例对象（<code>object</code>）都有一个私有属性（称之为 <code>__proto__</code> ）指向它的构造函数的原型对象（ <code>prototype</code> ）。该原型对象也有一个自己的原型对象（ <code>__proto__</code> ），层层向上直到一个对象的原型对象为 <code>null</code> 。根据定义， <code>null</code> 没有原型，并作为这个原型链中的最后一个环节。</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noreferrer">MDN</a></li></ul>`,19),l=[p];function c(t,r,i,d,C,A){return o(),n("div",null,l)}const D=s(e,[["render",c]]);export{_ as __pageData,D as default};
