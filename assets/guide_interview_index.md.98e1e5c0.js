import{_ as s,c as o,o as n,Q as a}from"./chunks/framework.66ea9e78.js";const B=JSON.parse('{"title":"面经","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/interview/index.md"}'),l={name:"guide/interview/index.md"},e=a(`<h1 id="面经" tabindex="-1">面经 <a class="header-anchor" href="#面经" aria-label="Permalink to &quot;面经&quot;">​</a></h1><h2 id="原型原型链" tabindex="-1">原型原型链 <a class="header-anchor" href="#原型原型链" aria-label="Permalink to &quot;原型原型链&quot;">​</a></h2><p>在 <code>javascript</code> 中，函数可以有属性。每个函数都有一个特殊的属性叫作原型（ <code>prototype</code> ），正如下面所展示的。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">doSomething</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">doSomething</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">doSomething</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype)</span></span></code></pre></div><p>正如上面所看到的， <code>doSomething</code> 函数有一个默认的原型属性，它在控制台上面呈现了出来。运行这段代码之后，控制台上面应该出现了像这样的一个对象。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">constructor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">doSomething</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">__proto__</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">constructor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">hasOwnProperty</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">isPrototypeOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">isPrototypeOf</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">propertyIsEnumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">propertyIsEnumerable</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">toLocaleString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toLocaleString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">toString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">valueOf</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>我们可以添加一些属性到 doSomething 的原型上面，如下所示。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">doSomething</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>结果：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">constructor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">doSomething</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">__proto__</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">constructor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">hasOwnProperty</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">isPrototypeOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">isPrototypeOf</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">propertyIsEnumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">propertyIsEnumerable</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">toLocaleString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toLocaleString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">toString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">valueOf</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>然后，我们可以使用 <code>new</code> 运算符来在现在的这个原型基础之上，创建一个 <code>doSomething</code> 的实例。正确使用 <code>new</code> 运算符的方法就是在正常调用函数时，在函数名的前面加上一个 <code>new</code> 前缀。通过这种方法，在调用函数前加一个 <code>new</code> ，它就会返回一个这个函数的实例化对象。然后，就可以在这个对象上面添加一些属性。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> doSomeInstancing </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">DoSomething</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">doSomeInstancuing</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prop </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">some value</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>结果：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">prop</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">some value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">__proto__</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">constructor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">doSomething</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">__proto__</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">constructor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">hasOwnProperty</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">isPrototypeOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">isPrototypeOf</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">propertyIsEnumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">propertyIsEnumerable</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">toLocaleString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toLocaleString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">toString</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ƒ</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">valueOf</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>当你访问 <code>doSomeInstancing</code> 的一个属性，浏览器首先查找 <code>doSomeInstancing</code> 是否有这个属性。如果 <code>doSomeInstancing</code> 没有这个属性，然后浏览器就会在 <code>doSomeInstancing</code> 的 <code>__proto__</code> 中查找这个属性 (也就是 <code>doSomething.prototype</code>). 如果 <code>doSomeInstancing</code> 的 <code>__proto__</code> 有这个属性，那么 <code>doSomeInstancing</code> 的 <code>__proto__</code> 上的这个属性就会被使用。否则，如果 <code>doSomeInstancing</code> 的 <code>__proto__</code> 没有这个属性，浏览器就会去查找 <code>doSomeInstancing</code> 的 <code>__proto__</code> 的 <code>__proto__</code> ，看它是否有这个属性。默认情况下，所有函数的原型属性的 <code>__proto__</code> 就是 <code>window.Object.prototype</code>. 所以 <code>doSomeInstancing</code> 的 <code>__proto__</code> 的 <code>__proto__</code> (也就是 <code>doSomething.prototype</code> 的 <code>__proto__</code> (也就是 Object.prototype)) 会被查找是否有这个属性。如果没有在它里面找到这个属性，然后就会在 <code>doSomeInstancing</code> 的 <code>__proto__</code> 的 <code>__proto__</code> 的 <code>__proto__</code> <code>里面查找。然而这有一个问题：doSomeInstancing</code> 的 <code>__proto__</code> 的 <code>__proto__</code> 的 <code>__proto__</code> 不存在。最后，原型链上面的所有的 <code>__proto__</code> 都被找完了，浏览器所有已经声明了的 <code>__proto__</code> 上都不存在这个属性，然后就得出结论，这个属性是 <code>undefined</code>.</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>new 关键字做了哪几件事 <ol><li>创建一个空对象 <code>let obj = {}</code></li><li>改变 <code>this</code> 指向 (<code>bind</code> 、 <code>call</code> 、 <code>apply</code>)</li><li>添加属性</li><li>返回这个对象 <code>return obj</code></li></ol></li><li>构造函数/对象模板：专门用来反复创建相同结构对象的专门方法。</li><li>继承：使用现有类型，创建出新的类型，新类型可以使用现有类型的属性和方法，也可以拓展出现有类型没有的属性和方法。</li><li>原型链：一个对象的隐式指向创建该对象的构造函数的原型对象，以此形成的链叫原型链。</li><li>原型链的作用：用来实现继承的。</li><li>隐式原型： <code>__proto__</code> 任何对象都有隐式原型，并且一个对象的隐式原型指向创建该对象的构造函数的原型对象。</li><li><code>constructor</code>: 每个实例对象都从原型中继承了一个 <code>constructor</code> 属性，该属性指向了用于构造此实例对象的构造函数。</li><li>每个实例对象（<code>object</code>）都有一个私有属性（称之为 <code>__proto__</code> ）指向它的构造函数的原型对象（ <code>prototype</code> ）。该原型对象也有一个自己的原型对象（ <code>__proto__</code> ），层层向上直到一个对象的原型对象为 <code>null</code> 。根据定义， <code>null</code> 没有原型，并作为这个原型链中的最后一个环节。</li></ul><h3 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h3><ul><li><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noreferrer">MDN</a></li></ul><h2 id="vue2-和-vue3-的区别" tabindex="-1">vue2 和 vue3 的区别 <a class="header-anchor" href="#vue2-和-vue3-的区别" aria-label="Permalink to &quot;vue2 和 vue3 的区别&quot;">​</a></h2><h3 id="vue2-和-vue3-双向数据绑定原理发生了改变" tabindex="-1">vue2 和 vue3 双向数据绑定原理发生了改变 <a class="header-anchor" href="#vue2-和-vue3-双向数据绑定原理发生了改变" aria-label="Permalink to &quot;vue2 和 vue3 双向数据绑定原理发生了改变&quot;">​</a></h3><ul><li>vue2 的双向数据绑定是利用了 es5 的一个 <code>API Object.definepropert()</code> 对数据进行劫持结合发布订阅模式来实现的。</li><li>vue3 中使用了 es6 的 <code>proxy API</code> 对数据进行处理。相比与 vue2 ，使用 <code>proxy API</code> 优势有： <ol><li>defineProperty 只能监听某个属性，不能对全对象进行监听；可以省去 for in 、闭包等内容来提升效率（直接绑定整个对象即可）；</li><li>可以监听数组，不用再去单独的对数组做特异性操作，vue3 可以检测到数组内部数据的变化。</li></ol></li></ul><h3 id="vue3-支持碎片-fragments" tabindex="-1">vue3 支持碎片(Fragments) <a class="header-anchor" href="#vue3-支持碎片-fragments" aria-label="Permalink to &quot;vue3 支持碎片(Fragments)&quot;">​</a></h3><h3 id="composition-api" tabindex="-1">Composition API <a class="header-anchor" href="#composition-api" aria-label="Permalink to &quot;Composition API&quot;">​</a></h3><p>vue2 与 vue3 最大的区别是 vue2 使用选项类型 api ，对比 vue3 合成型 api 。旧得选项型 api 在代码里分割了不同得属性： <code>data</code> 、 <code>computed</code> 、 <code>methods</code> 等；新得合成型 api 能让我们使用方法来分割，相比于旧的 api 使用属性来分组，这样代码会更加简便和整洁。</p><h3 id="建立数据-data" tabindex="-1">建立数据 data <a class="header-anchor" href="#建立数据-data" aria-label="Permalink to &quot;建立数据 data&quot;">​</a></h3><p>vue2 是把数据放入 data 中，vue3 就需要使用一个新的 <code>setup()</code> 方法，此方法在组件初始化构造得时候触发。使用一下三个步骤来简=建立反应性数据：</p><ol><li>从 vue 引入 <code>reactive</code> ；</li><li>使用 <code>reactive()</code> 方法来声明数据为响应性数据；</li><li>使用 <code>setup()</code> 方法来返回我们得响应性数据，从而 <code>template</code> 可以获取这些响应性数据。</li></ol><h3 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">vue2</th><th style="text-align:left;">vue3</th></tr></thead><tbody><tr><td style="text-align:left;">beforeCreate</td><td style="text-align:left;">setup()</td></tr><tr><td style="text-align:left;">Created</td><td style="text-align:left;">setup()</td></tr><tr><td style="text-align:left;">beforeMount</td><td style="text-align:left;">onBeforeMount</td></tr><tr><td style="text-align:left;">mounted</td><td style="text-align:left;">onMounted</td></tr><tr><td style="text-align:left;">beforeUpdate</td><td style="text-align:left;">onBeforeUpdate</td></tr><tr><td style="text-align:left;">updated</td><td style="text-align:left;">onUpdated</td></tr><tr><td style="text-align:left;">beforeDestroyed</td><td style="text-align:left;">onBeforeUnmount</td></tr><tr><td style="text-align:left;">destroyed</td><td style="text-align:left;">onUnmounted</td></tr><tr><td style="text-align:left;">activated</td><td style="text-align:left;">onActivated</td></tr><tr><td style="text-align:left;">deactivated</td><td style="text-align:left;">onDeactivated</td></tr></tbody></table><h3 id="父子传参不同-setup-函数特性" tabindex="-1">父子传参不同， <code>setup()</code> 函数特性 <a class="header-anchor" href="#父子传参不同-setup-函数特性" aria-label="Permalink to &quot;父子传参不同， \`setup()\` 函数特性&quot;">​</a></h3><ol><li><code>setup()</code> 函数接收两个参数：<code>props</code> 、 <code>context</code> (包含 <code>attrs</code> 、 <code>slots</code> 、 <code>emit</code> )</li><li><code>setup</code> 函数是处于生命周期 <code>beforeCreated</code> 和 <code>created</code> 俩个钩子函数之前</li><li>执行 <code>setup</code> 时，组件实例尚未被创建（在 <code>setup()</code> 内部， <code>this</code> 不会是该活跃实例得引用，即不指向 vue 实例，vue 为了避免我们错误得使用，直接将 <code>setup</code> 函数中得 <code>this</code> 修改成了 <code>undefined</code> ）</li><li>与模板一起使用时，需要返回一个对象</li><li>因为 <code>setup</code> 函数中， <code>props</code> 是响应式得，当传入新的 <code>prop</code> 时，它将会被更新，所以不能使用 es6 解构，因为它会消除 <code>prop</code> 得响应性，如需解构 <code>prop</code>，可以通过使用 <code>setup</code> 函数中得 <code>toRefs</code> 来完成此操作。</li><li>父传子，用 <code>props</code> ,子传父用事件 <code>Emitting Events</code> 。在 vue2 中，会调用 <code>this.$emit</code> 然后传入事件名和对象；在 vue3 中得 <code>setup()</code> 中得第二个参数 <code>content</code> 对象中就有 <code>emit</code> ，那么我们只要在 <code>setup()</code> 接收第二个参数中使用分解对象法取出 <code>emit</code> 就可以在 <code>setup</code> 方法中随意使用了。</li><li>在 <code>setup()</code> 内使用响应式数据时，需要通过 <code>.value</code> 获取</li><li>从 <code>setup()</code> 中返回得对象上得 <code>property</code> 返回并可以在模板中被访问时，它将自动展开为内部值。不需要在模板中追加 <code>.value</code> 。</li><li><code>setup</code> 函数只能是同步的不能是异步的。</li></ol><h2 id="proxy-原理-vue3" tabindex="-1"><code>Proxy</code> 原理(vue3) <a class="header-anchor" href="#proxy-原理-vue3" aria-label="Permalink to &quot;\`Proxy\` 原理(vue3)&quot;">​</a></h2><p><code>Proxy</code> 可以理解成， <code>在目标对象之前架设一层 &quot;拦截&quot;</code> ，当外界对该对象访问的时候，都必须经过这层拦截，而 <code>Proxy</code> 就充当了这种机制，类似于代理的含义，它可以 <code>对外界访问对象之前进行过滤和改写该对象</code> 。</p><h3 id="proxy-基本语法" tabindex="-1"><code>Proxy</code> 基本语法 <a class="header-anchor" href="#proxy-基本语法" aria-label="Permalink to &quot;\`Proxy\` 基本语法&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 被代理之后返回的对象 = new Proxy(被代理对象，要代理对象的操作)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#BABED8;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> handler)</span></span></code></pre></div><ol><li>get(target, propKey, receiver)</li><li>set(target, propKey, value, receiver)</li><li>has(target, propKey)</li><li>construct(target, args)</li><li>apply(target, object, args)</li></ol><h3 id="proxy-实现数据监听" tabindex="-1"><code>Proxy</code> 实现数据监听 <a class="header-anchor" href="#proxy-实现数据监听" aria-label="Permalink to &quot;\`Proxy\` 实现数据监听&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建响应式</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{})</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">target</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">target</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">null</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">target</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 不是对象或数组直接返回</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 代理配置</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">proxyConf</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    get</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">receiver</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 只处理本身（非原型）的属性</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ownKeys</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ownKeys</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">ownKeys</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">get</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">key</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 监听</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">receiver</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 返回不做处理</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 递归调用，这里所做的优化是只在调用到对象深层次的属性时才会触发递归。</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">result</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">val</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">receiver</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 重复的数据，不处理</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">target</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ownKeys</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ownKeys</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">ownKeys</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">set 已有属性</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">key</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 监听</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">新增的属性</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">val</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">receiver</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">set</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 是否设置成功</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    deleteProperty</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deleteProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">deleteProperty</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 生成代理对象</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">observed</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">proxyConf</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">observed</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 测试数据</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Jack</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">24</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">info</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">city</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hangzhou</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#F07178;">d</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>Object.definePropety</code> 的深度监听是一次性就全部监听的，而 <code>proxy</code> 的深度监听是在 <code>get</code> 的时候才去递归的，是一个惰性的，很慢的过程，这就是 <code>proxy</code> 性能的优化。</p><h3 id="proxy-优缺点" tabindex="-1"><code>Proxy</code> 优缺点 <a class="header-anchor" href="#proxy-优缺点" aria-label="Permalink to &quot;\`Proxy\` 优缺点&quot;">​</a></h3><ul><li>规避了 <code>Object.definedProperty</code> 的问题</li><li><code>proxy</code> 无法兼容所有浏览器，无法进行 <code>polyfill</code></li></ul><blockquote><p><code>polyfill</code> ( <code>polyfiller</code> )，指的是一个代码块。这个代码块向开发者提供了一种技术， 这种技术可以让浏览器提供原生支持，抹平不同浏览器对 <code>API</code> 兼容性的差异。</p></blockquote><h2 id="object-defineproperty-的缺点" tabindex="-1"><code>Object.defineProperty</code> 的缺点 <a class="header-anchor" href="#object-defineproperty-的缺点" aria-label="Permalink to &quot;\`Object.defineProperty\` 的缺点&quot;">​</a></h2><ol><li>深度监听需要一次性递归 (遍历每个对象的每个属性，如果对象嵌套很深的话，需要使用递归调用。)</li><li>无法监听新增属性/删除属性(Vue.set Vue.delete，未在 data 中定义的属性会报 undefined)</li><li>无法原生监听数组，需要特殊处理</li></ol><p>因此 <code>vue3</code> 中之后就改用 <code>Proxy</code> 来更好的解决如上面的问题，为 <code>data</code> 对象代理 <code>get</code> 、 <code>set</code> 、 <code>deleteProperty</code> 三个方法。</p><h2 id="reflect-对象" tabindex="-1">Reflect 对象 <a class="header-anchor" href="#reflect-对象" aria-label="Permalink to &quot;Reflect 对象&quot;">​</a></h2><p><code>Reflect</code> 对象原型就是 <code>Object</code></p><ol><li>将 <code>object</code> 对象的一些明显属性语言内部的方法（如 <code>Object.defineProperty</code> ）放到 <code>Reflect</code> 对象上，就能从 <code>Reflect</code> 对象上拿到语言内部的方法。</li><li>在使用对象的 <code>Object.defineProperty(obj, name, {})</code> 时，如果出现异常的话，会抛出一个错误，需要使用 <code>try catch</code> 去捕获，但是使用 <code>Reflect.defineProperty(obj, name, desc)</code> 则会返回 <code>false</code>。</li></ol><p>Reflect 有 13 个属性，这里我们只用到前 4 个：</p><ol><li><strong><code>Reflect.get</code>(目标对象，属性名，上下文对象) - 读取对象属性</strong></li><li><strong><code>Reflect.set</code>(目标属性，属性名，属性值，上下文对象）- 设置对象属性</strong></li><li><strong><code>Reflect.deleteProperty</code>(目标对象，属性名）- 删除对象属性</strong></li><li><strong><code>Reflect.ownKeys</code>(目标对象）- 返回由目标对象自身的属性（只处理本身-非原型的属性）组成的数组</strong></li><li><code>Reflect.apply</code>(目标函数，调用目标函数时绑定的 <code>this</code> 对象，参数列表) – 通过指定的参数列表调用目标函数</li><li><code>Reflect.has</code>(目标对象，属性名) – 检测对象上是否有此属性</li><li><code>Reflect.constructor</code>(被运行的目标函数,参数数组，生成的实列对象是谁的实列）（如果没有最后一个参数，默认生成的实列对象就和 <code>target</code> 构造函数是一样的）</li><li><code>Reflect.definedPrototype</code>(目标对象，属性名，描述符) – 定义对象属性，返回一个逻辑值</li><li><code>Reflect.isExtensible</code>(目标对象) – 用于检查一个对象是否可扩展（添加新属性或方法）</li><li><code>Reflect.preventExtensions</code>(目标对象) – 阻止新属性添加到目标对象中</li><li><code>Reflect.getOwnPropertyDescriptor</code>(目标对象，属性）- 返回对象中的属性描述符</li><li><code>Reflect.getPrototypeOf</code>(目标对象) – 返回一个对象原型</li></ol>`,51),p=[e];function t(c,r,y,F,D,i){return n(),o("div",null,p)}const A=s(l,[["render",t]]);export{B as __pageData,A as default};
